@using TD.Common.Kendo.Mvc5.Grid
@using TD.CTS.WebUI.Models

@section head{
    <link href="@Url.Content("~/Content/td/td.kendo.grid.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/td/td.kendo.grid.js")"></script>
<style type="text/css">
    .timewindow-color {
        background-color: #dbe5f1;
    }
</style>

}

@{
    var filterRow = new TD.Common.Kendo.Mvc5.Grid.Filters.FilterRow(Html);
}
@(Html.Kendo().Grid<TD.CTS.Data.Entities.SchedulePlaningVisit>()
    .Init("SchedulePlaningVisitsGrid")
    .Selectable(select => select.Type(GridSelectionType.Cell))
    .Editable()
    .Reorderable(reorderable => reorderable.Columns(false))
    .Columns(columns =>
    {
        columns.Buttons(buttons => buttons.Edit()).Width(80).Locked(true);
        columns.Bound(e => e.TrialCode).Width(80).Title("Код иссл.").Locked(true);
        columns.Bound(e => e.TrialName).Width(200).Title("Наименование иссл.").Locked(true);
        columns.Bound(e => e.PatientFullName).Width(250).Title("ФИО пациента").Locked(true);
        columns.Bound(e => e.TrialVisitName).Width(200).Title("Наименование визита").Locked(true);
        columns.Bound(e => e.MinDate).Width(100).Title("Дата нач.").Format("{0:dd.MM.yyyy}").Locked(true);
        columns.Bound(e => e.MaxDate).Width(100).Title("Дата кон.").Format("{0:dd.MM.yyyy}").Locked(true);
        columns.Bound(e => e.ScheduleDate).Width(100).Title("Дата план").Format("{0:dd.MM.yyyy}").Locked(true);
        columns.Bound(e => e.VisitEmployees).Width(200).Title("Сотрудники").Locked(true);

        var calend = (ScheduleCalend)ViewBag.Calend;
         var calendDates = calend.dateList;
         foreach (var calendDate in calend.dateList)
        {
            columns.Template(e => { })
                .ClientTemplate("#= SelectedVisit("+"\"" + calendDate.CalendDate.ToString("dd.MM.yyyy")+"\"" + ", data) #")
                .HeaderTemplate(string.Format(@"<div style='text-align:center;'></span><input type='hidden' value='{1}'/>{0}</div>", calendDate.CalendDate.ToString("ddd"), calendDate.CalendDate.ToString("dd.MM.yyyy")))
                .Width(40)
                .HtmlAttributes(new { style = "text-align:center;" });
        }
        columns.Template(e => { }).ClientTemplate(" ").Width("100%").HtmlAttributes(new { @class = "k-group-cell" });

//            columns.Template(e => { })
//                .ClientTemplate(/*"<span style='color:red;'>!</span>"*/"#= SelectedVisit(" + visit.TrialVisitID + ", data) #")
//                .HeaderTemplate(string.Format(@"<div style='text-align:center;'></span><input type='hidden' value='{2}'/></div>
//<div style=""text-align:center;"">{0}</div><div style=""text-align:center;"">{1}</div>", visit.TrialVisitName, visit.ScheduleDate.HasValue ? visit.ScheduleDate.Value.Date.ToString("dd.MM.yyyy") : "", visit.TrialVisitID))
//                .HtmlAttributes(new { style = "text-align:center;" })
//                .Width(100);

            //            //buttonsRow.Append(@"<th style='text-align:center; style='text-align:right;><a class='k-button k-button-icontext k-grid-edit td-grid-button' href='\#' title='Изменить визит'><span class='k-icon k-edit td-grid-button-image'></span></a>");
            //            //buttonsRow.Append(@"<a class='k-button k-button-icontext k-grid-delete td-grid-button' href='\#' title='Удалить визит'><span class='k-icon k-delete td-grid-button-image'></span></a></th>");

    })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)
        .Model(model =>
        {
            model.Id(e => e.ScheduleID);
            model.Id(e => e.TrialVisitID);
            model.Field(e => e.TrialCode).Editable(false);
            model.Field(e => e.TrialName).Editable(false);
            model.Field(e => e.PatientFullName).Editable(false);
            model.Field(e => e.TrialVisitName).Editable(false);
            model.Field(e => e.MinDate).Editable(false);
            model.Field(e => e.MaxDate).Editable(false);
            model.Field(e => e.ScheduleDate).Editable(false);
            model.Field(e => e.VisitEmployees).Editable(false);
                
            
        })
        .Read(read => read.Action("GetVisits", "SchedulesPlanning")/*.Data("kendo_grid_getfilters")*/)
        .Update(update => update.Action("UpdateScheduleVisit", "SchedulesPlanning"))
        .Events(events => events.Error("kendo_grid_error_handler"))
     )
               .Events(events => events.DataBound("onDataBound").Edit("OnSchedulesPlanningEdit").Change("OnSchedulesPlanningChange"))

)
<script>
  
    $(document).ready(function () {
       // var grid = $("#SchedulePlaningVisitsGrid");
        //kendo_grid_init(grid, true, '@Html.Raw(filterRow.HtmlFilterRow())');
        var grid = $("#SchedulePlaningVisitsGrid");
        kendo_grid_init(grid,1);




                @*grid.find(".td-grid-add.td-grid-button").click(function () {
            $().redirect("@Url.Action("Edit", "Schedules")");
        });

        grid.on("click", ".td-grid-edit.td-grid-button", function () {
            $().redirect("@Url.Action("Edit", "Schedules")", { Id: $(this).val() });
        });*@
    });
    function SelectedVisit(calendDateStr, data) {
        var calendDate = kendo.parseDate(calendDateStr, "dd.MM.yyyy");
        var retStr = "";
        //var checkBox = "";
        //Проверяем входит ли заданная дата из колонки в окнео визита
        if (calendDate >= data.MinDate && calendDate <= data.MaxDate) {
            //retStr = "<div class='timewindow'>{0}</div>";
        
        //
        if (data.ScheduleDate!= null && calendDate.getTime() == data.ScheduleDate.getTime()) {
            retStr = "<div class='timewindow'><input type=\"checkbox\" class=\"k-checkbox\" checked value=\"" + calendDateStr + "\" style=\"margin:0;display:none;\" /><span class=\"k-icon k-i-tick\"></span></div>";

        } else {
            retStr = "<div class='timewindow'><input type=\"checkbox\" class=\"k-checkbox\" disabled value=\"" + calendDateStr + "\" style=\"margin:0;display:none;\" /></div>";
        }
            
        }
        //retStr = String.format("retStr", checkBox);
        


        //if ($.inArray(visitId, data.VisitIds) !== -1)
        //    return "<input class=\"td-visit-checkbox\" type=\"checkbox\" value=\"" + visitId + "\" checked style=\"display:none;margin:0;\" /><span class=\"k-icon k-i-tick\"></span>";

        //return "<input class=\"td-visit-checkbox\" type=\"checkbox\" value=\"" + visitId + "\" style=\"display:none;margin:0;\" />";
        //var btn = String.format("<button onclick=\"OpenProceduereEmployeeWindow(\'" + visitId + "','" + data.ProcedureCode + "')\" style=\"color:{0}; border:none; background-color:transparent;\" >{1}</button>", 'green', 'v');
        //if ($.inArray(visitId, data.VisitIds) !== -1) {

        //    return btn;
        //return "<span style='color:green;'>V</span>"; //"<input type=\"checkbox\" value=\"" + visitId + "\" checked style=\"display:none;margin:0;\" /><span class=\"k-icon k-i-tick\"></span>";
        //}
        return retStr;
        //return "<button onclick='OpenProceduereEmployeeWindow()' style='color:red; border:none; background-color:transperent;' >!</button>";
        //return "<span style='color:red;'>!</span>";//<input type=\"checkbox\" value=\"" + visitId + "\" style=\"display:none;margin:0;\" />
        // return "<input class=\"td-visit-checkbox\" type=\"checkbox\" value=\"" + visitId + "\" checked style=\"display:none;margin:0;\" /><span class=\"k-icon k-i-tick\"></span>";

    }
    function onDataBound(arg) {
        $('.timewindow').parents('td').addClass("timewindow-color");
        //$('td').each(function() {
        //    if ($(this).text() == 'Jane') {
        //        $(this).addClass('customClass');
        //    }
        //});


        var grid = $("#SchedulePlaningVisitsGrid").data("kendoGrid");
        var data = grid.dataSource.data();

        $.each(data, function (i, row) {
            var status = row.RankState;

            if (status == 1) {
                $('tr[data-uid="' + row.uid + '"] ').css("color", "orange"); //green
            }
            if (status == 2)
            {
                $('tr[data-uid="' + row.uid + '"] ').css("color", "red");  //yellow
            }


        });
    






















        var myElem = document.getElementById('trParentHeader');
        if (myElem == null) {
            $("#SchedulePlaningVisitsGrid").find("th.k-header").parent().last().before("<tr id='trParentHeader'> " +
                " <th colspan='7' class='k-header'>01.01.2015</th> " +
                " <th scope='col' colspan='7' class='k-header'>08.01.2015</th>" +
                 " <th scope='col' colspan='7' class='k-header'>12.01.2015</th>" +
                "</tr>");
        }
    }
    

    var selectedCell;
    var isProcedureEdit = false;;
    function OnSchedulesPlanningEdit(e) {
        if (!Update()) {
            e.preventDefault();
            return;
        }

        isProcedureEdit = true;
        //ClearSelection();

        kendo_grid_onrowedit(e);

        //var dropDown = kendo.template($("#procedureTemplate").html());
        //e.container.find("td:eq(1)").html(dropDown({ value: e.model.ProcedureCode }));
    }
    
    function ClearSelection() {
        var grid = $("#SchedulePlaningVisitsGrid").data("kendoGrid");
        selectedCell = null;
        grid.clearSelection();
    }
    function Update(){
        var result = true;
        if(selectedCell != null){
            var input = selectedCell.find("input");
            var checked = input.is(':checked');
            var visitId = parseInt(input.val());
            var row = selectedCell.closest("tr");
            var grid = $("#SchedulePlaningVisitsGrid").data("kendoGrid");
            var rowData = grid.dataItem(row);
            var inArray = $.inArray(visitId, rowData.VisitIds) !== -1;
            if((checked && inArray) || (!checked && !inArray)){
                selectedCell.html(SelectedVisit(visitId, rowData));
                return result;
            }
            var values = $(row).find('input:checkbox:checked').map(function () {
                return parseInt(this.value);
            }).get();

            var newRow = {
                "Id": rowData.Id,
                "ProcedureCode": rowData.ProcedureCode,
                "TrialCode": rowData.TrialCode,
                "VisitIds": values
            }; 

            $.ajax({
                type: "POST",
                url: "@Url.Action("UpdateTrialProcedure", "Trials")",
                data: newRow,
            async: false,
            success: function (data) {
                //rowData.VisitIds = values;
                grid.dataSource.pushUpdate(newRow);
                selectedCell.html(SelectedVisit(visitId, rowData));
            },
            error: function (error) {
                result = false;
                grid.select(selectedCell);
                AjaxError(error);
            }
        });
    }

    return result;
    }

    function OnSelect(grid){
        var cell = grid.select();
        if(cell.length > 0){
            cell.find("input").css("display","inline-block");
            cell.find("span").remove();
            selectedCell = cell;
        } else {
            selectedCell = null;
        }

    }
    function OnSchedulesPlanningChange(e) {
        if (isProcedureEdit) {
            var grid = $("#ProceduresGrid").data("kendoGrid");
            if (grid.select().length > 0)
                grid.clearSelection();
            return;
        }

        if (Update())
            OnSelect($("#SchedulePlaningVisitsGrid").data("kendoGrid"));
    }

</script>